<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1233px" height="1299px" viewBox="-0.5 -0.5 1233 1299" content="3cU2FsdfGVkX1U+I9j2AdqOqCNi3aCB4y2YRgc5aoBnIk5P7hYAMk=1eXus14f" style="background-color: rgb(255, 255, 255);"><defs><style type="text/css">ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;</style></defs><g><rect x="30.5" y="30" width="361" height="712" fill="#97d077" stroke="#000000" pointer-events="none"/><path d="M 30.5 48 L 391.5 48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 30.5 101 L 391.5 101" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="210.5" y="42.5">geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="62.5"># _mat: Tip</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="78.5"># _size: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="94.5"># _tol: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="112.5">+ geom()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="128.5">+ &lt;&lt;virtual&gt;&gt; ~geom()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="144.5">+ geom(const geom&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="160.5">+ geom(geom&amp;&amp;) noexcept</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="176.5">+ geom(const Tip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="192.5">+ geom(Tip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="208.5">+ geom(const PodTip&amp;, const PodTip&amp;, const PodTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="224.5">+ geom(PodTip&amp;&amp;, PodTip&amp;&amp;, PodTip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="240.5">+ geom(const PodTip&amp;, const PodTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="256.5">+ geom(PodTip&amp;&amp;, PodTip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="272.5">+ mat() const: const Tip&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="288.5">+ size() const: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="304.5">+ tol() const: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="320.5">+ begin() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="336.5">+ cbegin() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="352.5">+ end() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="368.5">+ cend() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="384.5">+ inv(const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="400.5">+ pow(const int, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="416.5">+ pomeri(const double, const double, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="432.5">+ pomeri(tacka&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="448.5">+ pomeri(PodTip&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="464.5">+ pomeri(PodTip&amp;&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="480.5">+ str() const: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="496.5">+ operator*(const geom&amp;) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="512.5">+ operator*(const double) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="528.5">+ operator*=(const geom&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="544.5">+ operator*=(const double): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="560.5">+ operator^(const int) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="576.5">+ operator^=(const int): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="592.5">+ operator==(const geom&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="608.5">+ operator!=(const geom&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="624.5">+ operator=(const geom&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="640.5">+ operator=(geom&amp;&amp;) noexcept: geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="656.5">+ operator=(const Tip&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="672.5">+ operator=(Tip&amp;&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="688.5">+ &lt;&lt;nodiscard&gt;&gt; operator[] (const Vel) const: const PodTip&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="704.5">+ operator&lt;&lt;(const Elem): Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="720.5">- proveri(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="37" y="736.5">- &lt;&lt;friend&gt;&gt; operator&gt;&gt;(std::istream&amp;, geom&amp;): std::istream&amp;</text></g><path d="M 486 82 L 731 82 L 731 97 L 746 97 L 746 222 L 486 222 Z" fill="#ff0082" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><path d="M 486 82 L 731 82 L 746 97 L 731 97 L 731 82 L 746 97 L 746 222 L 486 222 Z" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(488.5,89.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="240" height="104" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><span class="pl-k"> using</span> Tip = std::vector&lt;std::vector&lt;<span class="pl-k">double</span>&gt;&gt;<table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC21" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> Iter = Tip::const_iterator</td></tr><tr></tr></tbody></table><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> PodTip = Tip::value_type</td>      </tr>      <tr>        </tr></tbody></table><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC23" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> PodIter = PodTip::const_iterator</td></tr><tr></tr></tbody></table><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC24" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> Elem = PodTip::value_type</td></tr><tr></tr></tbody></table><span class="pl-k"> using</span> Vel = Tip::size_type<br /> using OTip = std::vector&lt;tacka&gt;</div></div></foreignObject><svg width="240" height="104" style="width: 240px; height: 104px;"><defs><path id="VeXNnvaGWrziUgCN" d="M0,12.6 h32.03125"/><path id="1eXNnvaGWrziUgCO" d="M0,12.6 h239.84375 M0,27 h239.84375 M0,41.4 h239.84375 M0,55.8 h239.84375 M0,70.2 h239.84375 M0,84.60000000000001 h239.84375 M0,99.00000000000001 h239.84375"/><path id="teXNnvaGWrziUgCP" d="M189.78125,12.6 h36.046875"/><path id="deXNnvaGWrziUgCQ" d="M0,12.6 h239.84375 M0,27 h239.84375 M0,41.4 h239.84375 M0,55.8 h239.84375 M0,70.2 h239.84375 M0,84.60000000000001 h239.84375 M0,99.00000000000001 h239.84375"/><path id="DeXNnvaGWrziUgCR" d="M1,27.6 h28.6875"/><path id="jeXNnvaGWrziUgCS" d="M0,26.6 h161"/><path id="TeXNnvaGWrziUgCT" d="M1,43.6 h28.6875"/><path id="zeXNnvaGWrziUgCU" d="M0,42.6 h166"/><path id="LeXNnvaGWrziUgCV" d="M0,42.6 h166"/><path id="reXNnvaGWrziUgCW" d="M0,42.6 h166"/><path id="beXNnvaGWrziUgCX" d="M0 0"/><path id="7eXNnvaGWrziUgCY" d="M1,59.6 h28.6875"/><path id="7eXNnvaGWrziUgCZ" d="M0,58.6 h204"/><path id="HeXNnvaGWrziUgCa" d="M1,75.6 h28.6875"/><path id="neXNnvaGWrziUgCb" d="M0,74.6 h178"/><path id="XeXNnvaGWrziUgCc" d="M0,90.6 h32.03125"/><path id="3eXNnvaGWrziUgCd" d="M0,12.6 h239.84375 M0,27 h239.84375 M0,41.4 h239.84375 M0,55.8 h239.84375 M0,70.2 h239.84375 M0,84.60000000000001 h239.84375 M0,99.00000000000001 h239.84375"/><path id="veXNnvaGWrziUgCe" d="M0,12.6 h239.84375 M0,27 h239.84375 M0,41.4 h239.84375 M0,55.8 h239.84375 M0,70.2 h239.84375 M0,84.60000000000001 h239.84375 M0,99.00000000000001 h239.84375"/></defs><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#VeXNnvaGWrziUgCN"><tspan xml:space="preserve"> using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#1eXNnvaGWrziUgCO"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Tip = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Vel = Tip::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using OTip = std::vector&lt;tacka&gt;</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#teXNnvaGWrziUgCP"><tspan xml:space="preserve">double</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#deXNnvaGWrziUgCQ"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Tip = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Vel = Tip::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using OTip = std::vector&lt;tacka&gt;</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#DeXNnvaGWrziUgCR"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#jeXNnvaGWrziUgCS"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#TeXNnvaGWrziUgCT"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#zeXNnvaGWrziUgCU"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#LeXNnvaGWrziUgCV"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#reXNnvaGWrziUgCW"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#beXNnvaGWrziUgCX"><tspan xml:space="preserve"/></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#7eXNnvaGWrziUgCY"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#7eXNnvaGWrziUgCZ"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#HeXNnvaGWrziUgCa"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#neXNnvaGWrziUgCb"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#XeXNnvaGWrziUgCc"><tspan xml:space="preserve"> using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#3eXNnvaGWrziUgCd"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Tip = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Vel = Tip::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using OTip = std::vector&lt;tacka&gt;</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#veXNnvaGWrziUgCe"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Tip = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Vel = Tip::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using OTip = std::vector&lt;tacka&gt;</tspan></textPath></text></svg></switch></g><rect x="510.5" y="254" width="210" height="124" fill="#999900" stroke="#000000" pointer-events="none"/><path d="M 510.5 272 L 720.5 272" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 510.5 325 L 720.5 325" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="513" y="266.5">Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="286.5">+ g: geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="302.5">+ t: tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="318.5">+ i: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="336.5">+ Citac(geom&amp;, Vel)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="352.5">+ Citac(tacka&amp;, Vel)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="368.5">+ operator,(const Elem) const: Citac</text></g><rect x="487" y="444.5" width="287" height="91" fill="#999900" stroke="#000000" pointer-events="none"/><path d="M 487 462.5 L 774 462.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 487 483.5 L 774 483.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="489.5" y="457">Exc</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="493.5" y="477"># poruka: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="493.5" y="495">+ explicit Exc(const char*)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="493.5" y="511">+ explicit Exc(const std::string&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="493.5" y="527">+ &lt;&lt;override&gt;&gt; what() const noexcept: const char*</text></g><rect x="853" y="30" width="347" height="812" fill="#cda2be" stroke="#000000" pointer-events="none"/><path d="M 853 48 L 1200 48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 853 101 L 1200 101" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="855.5" y="42.5">tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="62.5"># _mat: PodTip</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="78.5"># _size: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="94.5"># _tol: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="112.5">+ tacka()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="128.5">+ ~tacka()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="144.5">+ tacka(const tacka&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="160.5">+ tacka(tacka&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="176.5">+ tacka(Elem, Elem)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="192.5">+ tacka(Elem, Elem, Elem)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="208.5">+ tacka(const Tip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="224.5">+ tacka(Tip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="240.5">+ tacka(const PodTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="256.5">+ tacka(PodTip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="272.5">+ mat() const: const PodTip&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="288.5">+ size() const: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="304.5">+ tol() const: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="320.5">+ begin() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="336.5">+ cbegin() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="352.5">+ end() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="368.5">+ cend() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="384.5">+ str() const: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="416.5">+ operator+() const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="432.5">+ operator+(const tacka&amp;) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="448.5">+ operator+(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="464.5">+ operator+=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="480.5">+ operator+=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="496.5">+ operator-() const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="512.5">+ operator-(const tacka&amp;) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="528.5">+ operator-(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="544.5">+ operator-=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="560.5">+ operator-=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="576.5">+ operator*(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="592.5">+ operator*=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="608.5">+ operator/(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="624.5">+ operator/=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="640.5">+ operator==(const tacka&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="656.5">+ operator&lt;(const tacka&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="672.5">+ operator=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="688.5">+ operator=(tacka&amp;&amp;) noexcept: tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="704.5">+ operator=(const Tip&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="720.5">+ operator=(Tip&amp;&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="736.5">+ operator=(const PodTip&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="752.5">+ operator=(PodTip&amp;&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="768.5">+ &lt;&lt;nodiscard&gt;&gt; operator[] (const Vel) const: const Elem&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="784.5">+ operator&lt;&lt;(const Elem): Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="800.5">- proveri(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="816.5">- proverim(const Tip&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="832.5">- &lt;&lt;friend&gt;&gt; operator&gt;&gt;(std::istream&amp;, tacka&amp;): std::istream&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="400.5">+ primeni(const geom&amp;): void</text></g><path d="M 391.5 386 L 441 386 Q 451 386 451 376 L 451 326 Q 451 316 461 316 L 508.26 316" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 497.38 322 L 509.38 316 L 497.38 310" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="450.5" y="353.5">&lt;&lt;use&gt;&gt;</text></g><path d="M 392 208 L 429 208 Q 439 208 439 198 L 439 162 Q 439 152 449 152 L 486 152" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 392 564 L 429 564 Q 439 564 439 554 L 439 500 Q 439 490 449 490 L 484.76 490" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 473.88 496 L 485.88 490 L 473.88 484" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="438.5" y="529">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 233 L 810 233 Q 800 233 800 223 L 800 162 Q 800 152 790 152 L 746 152" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 853 436 L 797 436 Q 787 436 787 426 L 787 326 Q 787 316 777 316 L 722.74 316" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 733.62 310 L 721.62 316 L 733.62 322" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="786.5" y="379">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 639 L 824 639 Q 814 639 814 629 L 814 500 Q 814 490 804 490 L 776.24 490" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 787.12 484 L 775.12 490 L 787.12 496" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="813.5" y="567">&lt;&lt;use&gt;&gt;</text></g><rect x="499.5" y="591.5" width="246" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 499.5 609.5 L 745.5 609.5" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="622" y="604">trans</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="506" y="626">+ trans(double, double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="506" y="642">+ trans(const tacka&amp;, const bool = false)</text></g><rect x="49" y="834.5" width="395" height="89" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 49 852.5 L 444 852.5" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="246" y="847">skal</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="55.5" y="869">+ skal(double, double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="55.5" y="885">+ skal(double, double, const tacka&amp; = {0, 0}, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="55.5" y="901">+ skal(const tacka&amp;, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="55.5" y="917">+ skal(const tacka&amp;, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="521" y="848.5" width="399" height="89" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 521 866.5 L 920 866.5" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="720" y="861">smic</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="527.5" y="883">+ smic(double, double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="527.5" y="899">+ smic(double, double, const tacka&amp; = {0, 0}, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="527.5" y="915">+ smic(const tacka&amp;, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="527.5" y="931">+ smic(const tacka&amp;, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="445.5" y="678" width="342" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 445.5 696 L 787.5 696" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="616" y="690.5">rot</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="452" y="712.5">+ rot(double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="452" y="728.5">+ rot(double, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="444" y="750" width="345" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 444 768 L 789 768" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="616" y="762.5">refl</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="450.5" y="784.5">+ refl(double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="450.5" y="800.5">+ refl(double, const tacka&amp; = {0, 0}, const bool = false)</text></g><path d="M 405.12 564 L 436 564 Q 446 564 446 574 L 446 610 Q 446 620 456 620 L 500 620" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 393.12 564 L 405.12 558 L 405.12 570 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 405.12 564 L 412.06 564 Q 419 564 419 574 L 419 697 Q 419 707 429 707 L 445.5 707" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 393.12 564 L 405.12 558 L 405.12 570 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 301 755.12 L 301 769 Q 301 779 311 779 L 444 779" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 301 743.12 L 307 755.12 L 295 755.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 121 755.12 L 121 778 Q 121 788 131 788 L 237 788 Q 247 788 247 798 L 247 834.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 121 743.12 L 127 755.12 L 115 755.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 211 755.12 L 211 764.56 Q 211 774 221 774 L 254 774 Q 264 774 264 784 L 264 811 Q 264 821 274 821 L 486 821 Q 496 821 496 831 L 496 861 Q 496 871 506 871 L 521 871" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 211 743.12 L 217 755.12 L 205 755.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="105" y="968" width="194" height="122" fill="#67ab9f" stroke="#000000" pointer-events="none"/><path d="M 105 986 L 299 986" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 105 1007 L 299 1007" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="201.5" y="980.5">oblik</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="111.5" y="1018.5">+ &lt;&lt;virtual&gt;&gt; ~oblik()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="111.5" y="1034.5">+ tacke() const: const OTip&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="111.5" y="1050.5">+ transformisi(const geom&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="111.5" y="1066.5"># oblik(const OTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="111.5" y="1082.5"># oblik(OTip&amp;&amp; = {})</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="111.5" y="1000.5"># _tacke: OTip</text></g><rect x="429" y="967" width="221" height="188" fill="#e6ffcc" stroke="#000000" pointer-events="none"/><path d="M 429 985 L 650 985" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 429 1006 L 650 1006" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="539" y="979.5">poly</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1017.5">+ poly(const OTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1033.5">+ poly(OTip&amp;&amp; = {})</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1049.5">+ poly(const std::initializer_list&lt;tacka&gt;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1065.5">+ zatvoren() const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1081.5">+ zatvori(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1097.5">+ otvori(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1113.5">+ dodaj(const tacka&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1129.5">+ dodaj(tacka&amp;&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="1145.5">+ omot(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="435.5" y="999.5">- _zatvoren: bool</text></g><path d="M 312.12 1029 L 354 1029 Q 364 1029 364 1039 L 364 1051 Q 364 1061 374 1061 L 429 1061" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 300.12 1029 L 312.12 1023 L 312.12 1035 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="729" y="995" width="327" height="44" fill="#e6ffcc" stroke="#000000" pointer-events="none"/><path d="M 729 1013 L 1056 1013" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="892" y="1007.5">ppoly</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="735.5" y="1029.5">+ ppoly(const tacka = {0, 0}, const Vel = 3, const Elem = 3)</text></g><path d="M 663.12 1061 L 680 1061 Q 690 1061 690 1051 L 690 1027 Q 690 1017 700 1017 L 729 1017" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 651.12 1061 L 663.12 1055 L 663.12 1067 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="211" y="1208" width="340" height="58" fill="#ff6666" stroke="#000000" pointer-events="none"/><path d="M 211 1226 L 551 1226" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="380.5" y="1220.5">elipsa</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="217.5" y="1242.5">+ elipsa(const tacka = {0, 0}, const Elem = 3, const Elem = 6)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="217.5" y="1258.5">+ elipsa(const tacka, const tacka, const tacka)</text></g><rect x="729" y="1160" width="245" height="58" fill="#ffcc99" stroke="#000000" pointer-events="none"/><path d="M 729 1178 L 974 1178" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="851" y="1172.5">krug</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="735.5" y="1194.5">+ krug(const tacka = {0, 0}, const Elem = 5)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="735.5" y="1210.5">+ krug(const tacka, const tacka)</text></g><path d="M 251 1103.12 L 251 1115 Q 251 1125 261 1125 L 365 1125 Q 375 1125 375 1135 L 375 1175 Q 375 1185 385 1185 L 698 1185 Q 708 1185 708 1192.5 L 708 1196.25 Q 708 1200 718 1200 L 723.5 1200 Q 729 1200 729 1194.5 L 729 1189" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 251 1091.12 L 257 1103.12 L 245 1103.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 154 1103.12 L 154 1227 Q 154 1237 164 1237 L 211 1237" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 154 1091.12 L 160 1103.12 L 148 1103.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 391.5 386 L 441 386 Q 451 386 451 376 L 451 326 Q 451 316 461 316 L 508.26 316" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 497.38 322 L 509.38 316 L 497.38 310" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="450.5" y="353.5">&lt;&lt;use&gt;&gt;</text></g><path d="M 392 208 L 429 208 Q 439 208 439 198 L 439 162 Q 439 152 449 152 L 486 152" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 392 564 L 429 564 Q 439 564 439 554 L 439 500 Q 439 490 449 490 L 484.76 490" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 473.88 496 L 485.88 490 L 473.88 484" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="438.5" y="529">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 233 L 810 233 Q 800 233 800 223 L 800 162 Q 800 152 790 152 L 746 152" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 853 436 L 797 436 Q 787 436 787 426 L 787 326 Q 787 316 777 316 L 722.74 316" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 733.62 310 L 721.62 316 L 733.62 322" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="786.5" y="379">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 639 L 824 639 Q 814 639 814 629 L 814 500 Q 814 490 804 490 L 776.24 490" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 787.12 484 L 775.12 490 L 787.12 496" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="813.5" y="567">&lt;&lt;use&gt;&gt;</text></g><path d="M 405.12 564 L 436 564 Q 446 564 446 574 L 446 610 Q 446 620 456 620 L 500 620" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 393.12 564 L 405.12 558 L 405.12 570 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 405.12 564 L 412.06 564 Q 419 564 419 574 L 419 697 Q 419 707 429 707 L 445.5 707" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 393.12 564 L 405.12 558 L 405.12 570 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 301 755.12 L 301 769 Q 301 779 311 779 L 444 779" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 301 743.12 L 307 755.12 L 295 755.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 121 755.12 L 121 778 Q 121 788 131 788 L 237 788 Q 247 788 247 798 L 247 834.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 121 743.12 L 127 755.12 L 115 755.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 211 755.12 L 211 764.56 Q 211 774 221 774 L 254 774 Q 264 774 264 784 L 264 811 Q 264 821 274 821 L 486 821 Q 496 821 496 831 L 496 861 Q 496 871 506 871 L 521 871" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 211 743.12 L 217 755.12 L 205 755.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 312.12 1029 L 354 1029 Q 364 1029 364 1039 L 364 1051 Q 364 1061 374 1061 L 429 1061" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 300.12 1029 L 312.12 1023 L 312.12 1035 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 663.12 1061 L 680 1061 Q 690 1061 690 1051 L 690 1027 Q 690 1017 700 1017 L 729 1017" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 651.12 1061 L 663.12 1055 L 663.12 1067 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 251 1103.12 L 251 1115 Q 251 1125 261 1125 L 365 1125 Q 375 1125 375 1135 L 375 1175 Q 375 1185 385 1185 L 698 1185 Q 708 1185 708 1192.5 L 708 1196.25 Q 708 1200 718 1200 L 723.5 1200 Q 729 1200 729 1194.5 L 729 1189" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 251 1091.12 L 257 1103.12 L 245 1103.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 154 1103.12 L 154 1227 Q 154 1237 164 1237 L 211 1237" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 154 1091.12 L 160 1103.12 L 148 1103.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/></g><g fill="#787878" font-family="Arial,Helvetica" font-size="12px"><text x="6" y="15">Visual Paradigm Online Diagrams Express Edition</text></g><g fill="#787878" font-family="Arial,Helvetica" text-anchor="end" font-size="12px"><text x="1227" y="1292">Visual Paradigm Online Diagrams Express Edition</text></g></svg>