<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" style="background-color: rgb(255, 255, 255);" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1273px" height="1011px" viewBox="-0.5 -0.5 1273 1011" content="3cU2FsddGVkX1b8gu5MWYpZxlBimYQ4Cd3fmqrkfDEXco34xhuNUs=1cvGU121"><defs><style type="text/css">ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;</style></defs><g><rect x="41.5" y="42" width="361" height="712" fill="#97d077" stroke="#000000" pointer-events="none"/><path d="M 41.5 59.33 L 402.5 59.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 41.5 112.33 L 402.5 112.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="221.5" y="54.33">geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="73.83"># _mat: Tip</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="89.83"># _size: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="105.83"># _tol: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="123.83">+ geom()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="139.83">+ &lt;&lt;virtual&gt;&gt; ~geom()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="155.83">+ geom(const geom&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="171.83">+ geom(geom&amp;&amp;) noexcept</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="187.83">+ geom(const Tip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="203.83">+ geom(Tip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="219.83">+ geom(const PodTip&amp;, const PodTip&amp;, const PodTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="235.83">+ geom(PodTip&amp;&amp;, PodTip&amp;&amp;, PodTip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="251.83">+ geom(const PodTip&amp;, const PodTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="267.83">+ geom(PodTip&amp;&amp;, PodTip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="283.83">+ mat() const: const Tip&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="299.83">+ size() const: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="315.83">+ tol() const: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="331.83">+ begin() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="347.83">+ cbegin() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="363.83">+ end() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="379.83">+ cend() const noexcept: Iter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="395.83">+ inv(const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="411.83">+ pow(const int, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="427.83">+ pomeri(const double, const double, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="443.83">+ pomeri(tacka&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="459.83">+ pomeri(PodTip&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="475.83">+ pomeri(PodTip&amp;&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="491.83">+ str() const: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="507.83">+ operator*(const geom&amp;) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="523.83">+ operator*(const double) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="539.83">+ operator*=(const geom&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="555.83">+ operator*=(const double): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="571.83">+ operator^(const int) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="587.83">+ operator^=(const int): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="603.83">+ operator==(const geom&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="619.83">+ operator!=(const geom&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="635.83">+ operator=(const geom&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="651.83">+ operator=(geom&amp;&amp;) noexcept: geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="667.83">+ operator=(const Tip&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="683.83">+ operator=(Tip&amp;&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="699.83">+ &lt;&lt;nodiscard&gt;&gt; operator[] (const Vel) const: const PodTip&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="715.83">+ operator&lt;&lt;(const Elem): Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="731.83">- proveri(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="48" y="747.83">- &lt;&lt;friend&gt;&gt; operator&gt;&gt;(std::istream&amp;, geom&amp;): std::istream&amp;</text></g><path d="M 497 94 L 742 94 L 742 109 L 757 109 L 757 223 L 497 223 Z" fill="#ff0082" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><path d="M 497 94 L 742 94 L 757 109 L 742 109 L 742 94 L 757 109 L 757 223 L 497 223 Z" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(499.5,99.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="243" height="92" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><span class="pl-k"> using</span> Tip = std::vector&lt;std::vector&lt;<span class="pl-k">double</span>&gt;&gt;<table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC21" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> Iter = Tip::const_iterator</td></tr><tr></tr></tbody></table><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> PodTip = Tip::value_type</td>      </tr>      <tr>        </tr></tbody></table><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC23" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> PodIter = PodTip::const_iterator</td></tr><tr></tr></tbody></table><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC24" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> Elem = PodTip::value_type</td></tr><tr></tr></tbody></table><span class="pl-k"> using</span> Vel = Tip::size_type</div></div></foreignObject><svg style="width: 243px; height: 92px;" width="243" height="92"><defs><path id="c5HXOPaGCBR6kgBM" d="M0,12.799996948242187 h34"/><path id="C5HXOPaGCBR6kgBN" d="M0,12.6 h243 M0,27 h243 M0,41.4 h243 M0,55.8 h243 M0,70.2 h243 M0,84.60000000000001 h243"/><path id="S5HXOPaGCBR6kgBO" d="M191,12.799996948242187 h38"/><path id="K5HXOPaGCBR6kgBP" d="M0,12.6 h243 M0,27 h243 M0,41.4 h243 M0,55.8 h243 M0,70.2 h243 M0,84.60000000000001 h243"/><path id="q5HXOPaGCBR6kgBQ" d="M1,28.200006103515626 h31"/><path id="a5HXOPaGCBR6kgBR" d="M0,26.999993896484376 h164"/><path id="65HXOPaGCBR6kgBS" d="M1,44.6 h31"/><path id="m5HXOPaGCBR6kgBT" d="M0,43.400003051757814 h169"/><path id="m5HXOPaGCBR6kgBU" d="M0,43.400003051757814 h169"/><path id="25HXOPaGCBR6kgBV" d="M0,43.400003051757814 h169"/><path id="O5HXOPaGCBR6kgBW" d="M0 0"/><path id="u5HXOPaGCBR6kgBX" d="M1,60.999993896484376 h31"/><path id="u5HXOPaGCBR6kgBY" d="M0,59.79999694824219 h208"/><path id=".5HXOPaGCBR6kgBZ" d="M1,77.4000030517578 h31"/><path id="B5HXOPaGCBR6kgBa" d="M0,76.20000610351562 h181"/><path id="h5HXOPaGCBR6kgBb" d="M0,92.79999694824218 h34"/><path id="R5HXOPaGCBR6kgBc" d="M0,12.6 h243 M0,27 h243 M0,41.4 h243 M0,55.8 h243 M0,70.2 h243 M0,84.60000000000001 h243"/></defs><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#c5HXOPaGCBR6kgBM"><tspan xml:space="preserve"> using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#C5HXOPaGCBR6kgBN"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Tip = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Vel = Tip::size_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#S5HXOPaGCBR6kgBO"><tspan xml:space="preserve">double</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#K5HXOPaGCBR6kgBP"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Tip = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Vel = Tip::size_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#q5HXOPaGCBR6kgBQ"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#a5HXOPaGCBR6kgBR"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#65HXOPaGCBR6kgBS"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#m5HXOPaGCBR6kgBT"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#m5HXOPaGCBR6kgBU"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#25HXOPaGCBR6kgBV"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#O5HXOPaGCBR6kgBW"><tspan xml:space="preserve"/></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#u5HXOPaGCBR6kgBX"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#u5HXOPaGCBR6kgBY"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#.5HXOPaGCBR6kgBZ"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#B5HXOPaGCBR6kgBa"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#h5HXOPaGCBR6kgBb"><tspan xml:space="preserve"> using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#R5HXOPaGCBR6kgBc"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Tip = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Iter = Tip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodTip = Tip::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> PodIter = PodTip::const_iterator</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Elem = PodTip::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Vel = Tip::size_type</tspan></textPath></text></svg></switch></g><rect x="521.5" y="266" width="210" height="124" fill="#999900" stroke="#000000" pointer-events="none"/><path d="M 521.5 283.33 L 731.5 283.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 521.5 336.33 L 731.5 336.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="523.83" y="278.33">Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="528" y="297.83">+ g: geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="528" y="313.83">+ t: tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="528" y="329.83">+ i: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="528" y="347.83">+ Citac(geom&amp;, Vel)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="528" y="363.83">+ Citac(tacka&amp;, Vel)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="528" y="379.83">+ operator,(const Elem) const: Citac</text></g><rect x="498" y="456.5" width="287" height="91" fill="#999900" stroke="#000000" pointer-events="none"/><path d="M 498 473.83 L 785 473.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 498 494.83 L 785 494.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="500.33" y="468.83">Exc</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="504.5" y="488.33"># poruka: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="504.5" y="506.33">+ explicit Exc(const char*)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="504.5" y="522.33">+ explicit Exc(const std::string&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="504.5" y="538.33">+ &lt;&lt;override&gt;&gt; what() const noexcept: const char*</text></g><rect x="864" y="42" width="347" height="796" fill="#cda2be" stroke="#000000" pointer-events="none"/><path d="M 864 59.33 L 1211 59.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 864 112.33 L 1211 112.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="866.33" y="54.33">tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="73.83"># _mat: PodTip</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="89.83"># _size: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="105.83"># _tol: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="123.83">+ tacka()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="139.83">+ ~tacka()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="155.83">+ tacka(const tacka&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="171.83">+ tacka(tacka&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="187.83">+ tacka(Elem, Elem)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="203.83">+ tacka(Elem, Elem, Elem)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="219.83">+ tacka(const Tip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="235.83">+ tacka(Tip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="251.83">+ tacka(const PodTip&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="267.83">+ tacka(PodTip&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="283.83">+ mat() const: const PodTip&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="299.83">+ size() const: Vel</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="315.83">+ tol() const: Elem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="331.83">+ begin() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="347.83">+ cbegin() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="363.83">+ end() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="379.83">+ cend() const noexcept: PodIter</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="395.83">+ str() const: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="411.83">+ operator+() const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="427.83">+ operator+(const tacka&amp;) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="443.83">+ operator+(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="459.83">+ operator+=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="475.83">+ operator+=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="491.83">+ operator-() const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="507.83">+ operator-(const tacka&amp;) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="523.83">+ operator-(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="539.83">+ operator-=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="555.83">+ operator-=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="571.83">+ operator*(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="587.83">+ operator*=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="603.83">+ operator/(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="619.83">+ operator/=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="635.83">+ operator==(const tacka&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="651.83">+ operator&lt;(const tacka&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="667.83">+ operator=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="683.83">+ operator=(tacka&amp;&amp;) noexcept: tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="699.83">+ operator=(const Tip&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="715.83">+ operator=(Tip&amp;&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="731.83">+ operator=(const PodTip&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="747.83">+ operator=(PodTip&amp;&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="763.83">+ &lt;&lt;nodiscard&gt;&gt; operator[] (const Vel) const: const Elem&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="779.83">+ operator&lt;&lt;(const Elem): Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="795.83">- proveri(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="811.83">- proverim(const Tip&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="870.5" y="827.83">- &lt;&lt;friend&gt;&gt; operator&gt;&gt;(std::istream&amp;, tacka&amp;): std::istream&amp;</text></g><path d="M 402.5 397.67 L 452.33 397.67 Q 462.33 397.67 462.33 387.67 L 462.33 337.67 Q 462.33 327.67 472.33 327.67 L 519.26 327.67" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 508.38 333.67 L 520.38 327.67 L 508.38 321.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="461.83" y="366.33">&lt;&lt;use&gt;&gt;</text></g><path d="M 402.33 220.17 L 439.83 220.17 Q 449.83 220.17 449.83 210.17 L 449.83 168.5 Q 449.83 158.5 459.83 158.5 L 497 158.5" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 402.33 576 L 440.67 576 Q 450.67 576 450.67 566 L 450.67 511.83 Q 450.67 501.83 460.67 501.83 L 495.93 501.83" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 485.05 507.83 L 497.05 501.83 L 485.05 495.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="450.17" y="542.33">&lt;&lt;use&gt;&gt;</text></g><path d="M 864 241 L 820.67 241 Q 810.67 241 810.67 231 L 810.67 168.5 Q 810.67 158.5 800.67 158.5 L 757.33 158.5" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 864 440.17 L 808.17 440.17 Q 798.17 440.17 798.17 430.17 L 798.17 337.67 Q 798.17 327.67 788.17 327.67 L 733.74 327.67" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 744.62 321.67 L 732.62 327.67 L 744.62 333.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="797.67" y="386.5">&lt;&lt;use&gt;&gt;</text></g><path d="M 864 639.33 L 834.83 639.33 Q 824.83 639.33 824.83 629.33 L 824.83 511.83 Q 824.83 501.83 814.83 501.83 L 787.07 501.83" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 797.95 495.83 L 785.95 501.83 L 797.95 507.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="824.33" y="573.17">&lt;&lt;use&gt;&gt;</text></g><rect x="510.5" y="603.5" width="246" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 510.5 620.83 L 756.5 620.83" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="633" y="615.83">trans</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="637.33">+ trans(double, double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="517" y="653.33">+ trans(const tacka&amp;, const bool = false)</text></g><rect x="60" y="846.5" width="395" height="89" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 60 863.83 L 455 863.83" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="257" y="858.83">skal</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="66.5" y="880.33">+ skal(double, double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="66.5" y="896.33">+ skal(double, double, const tacka&amp; = {0, 0}, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="66.5" y="912.33">+ skal(const tacka&amp;, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="66.5" y="928.33">+ skal(const tacka&amp;, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="532" y="860.5" width="399" height="89" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 532 877.83 L 931 877.83" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="731" y="872.83">smic</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="538.5" y="894.33">+ smic(double, double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="538.5" y="910.33">+ smic(double, double, const tacka&amp; = {0, 0}, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="538.5" y="926.33">+ smic(const tacka&amp;, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="538.5" y="942.33">+ smic(const tacka&amp;, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="456.5" y="690" width="342" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 456.5 707.33 L 798.5 707.33" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="627" y="702.33">rot</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="463" y="723.83">+ rot(double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="463" y="739.83">+ rot(double, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="455" y="762" width="345" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 455 779.33 L 800 779.33" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="627" y="774.33">refl</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="461.5" y="795.83">+ refl(double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="461.5" y="811.83">+ refl(double, const tacka&amp; = {0, 0}, const bool = false)</text></g><path d="M 415.45 576 L 446.5 576 Q 456.5 576 456.5 586 L 456.5 621.83 Q 456.5 631.83 466.5 631.83 L 510.67 631.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 403.45 576 L 415.45 570 L 415.45 582 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 415.45 576 L 422.64 576 Q 429.83 576 429.83 586 L 429.83 708.5 Q 429.83 718.5 439.83 718.5 L 456.5 718.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 403.45 576 L 415.45 570 L 415.45 582 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 312.33 767.45 L 312.33 780.17 Q 312.33 790.17 322.33 790.17 L 454.83 790.17" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 312.33 755.45 L 318.33 767.45 L 306.33 767.45 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 131.5 767.45 L 131.5 790.17 Q 131.5 800.17 141.5 800.17 L 247.33 800.17 Q 257.33 800.17 257.33 810.17 L 257.33 846.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 131.5 755.45 L 137.5 767.45 L 125.5 767.45 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 222.33 767.45 L 222.33 776.73 Q 222.33 786 232.33 786 L 264.83 786 Q 274.83 786 274.83 796 L 274.83 822.67 Q 274.83 832.67 284.83 832.67 L 497.33 832.67 Q 507.33 832.67 507.33 842.67 L 507.33 872.67 Q 507.33 882.67 517.33 882.67 L 532.33 882.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 222.33 755.45 L 228.33 767.45 L 216.33 767.45 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 402.5 397.67 L 452.33 397.67 Q 462.33 397.67 462.33 387.67 L 462.33 337.67 Q 462.33 327.67 472.33 327.67 L 519.26 327.67" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 508.38 333.67 L 520.38 327.67 L 508.38 321.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="461.83" y="366.33">&lt;&lt;use&gt;&gt;</text></g><path d="M 402.33 220.17 L 439.83 220.17 Q 449.83 220.17 449.83 210.17 L 449.83 168.5 Q 449.83 158.5 459.83 158.5 L 497 158.5" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 402.33 576 L 440.67 576 Q 450.67 576 450.67 566 L 450.67 511.83 Q 450.67 501.83 460.67 501.83 L 495.93 501.83" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 485.05 507.83 L 497.05 501.83 L 485.05 495.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="450.17" y="542.33">&lt;&lt;use&gt;&gt;</text></g><path d="M 864 241 L 820.67 241 Q 810.67 241 810.67 231 L 810.67 168.5 Q 810.67 158.5 800.67 158.5 L 757.33 158.5" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 864 440.17 L 808.17 440.17 Q 798.17 440.17 798.17 430.17 L 798.17 337.67 Q 798.17 327.67 788.17 327.67 L 733.74 327.67" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 744.62 321.67 L 732.62 327.67 L 744.62 333.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="797.67" y="386.5">&lt;&lt;use&gt;&gt;</text></g><path d="M 864 639.33 L 834.83 639.33 Q 824.83 639.33 824.83 629.33 L 824.83 511.83 Q 824.83 501.83 814.83 501.83 L 787.07 501.83" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 797.95 495.83 L 785.95 501.83 L 797.95 507.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="824.33" y="573.17">&lt;&lt;use&gt;&gt;</text></g><path d="M 415.45 576 L 446.5 576 Q 456.5 576 456.5 586 L 456.5 621.83 Q 456.5 631.83 466.5 631.83 L 510.67 631.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 403.45 576 L 415.45 570 L 415.45 582 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 415.45 576 L 422.64 576 Q 429.83 576 429.83 586 L 429.83 708.5 Q 429.83 718.5 439.83 718.5 L 456.5 718.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 403.45 576 L 415.45 570 L 415.45 582 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 312.33 767.45 L 312.33 780.17 Q 312.33 790.17 322.33 790.17 L 454.83 790.17" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 312.33 755.45 L 318.33 767.45 L 306.33 767.45 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 131.5 767.45 L 131.5 790.17 Q 131.5 800.17 141.5 800.17 L 247.33 800.17 Q 257.33 800.17 257.33 810.17 L 257.33 846.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 131.5 755.45 L 137.5 767.45 L 125.5 767.45 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 222.33 767.45 L 222.33 776.73 Q 222.33 786 232.33 786 L 264.83 786 Q 274.83 786 274.83 796 L 274.83 822.67 Q 274.83 832.67 284.83 832.67 L 497.33 832.67 Q 507.33 832.67 507.33 842.67 L 507.33 872.67 Q 507.33 882.67 517.33 882.67 L 532.33 882.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 222.33 755.45 L 228.33 767.45 L 216.33 767.45 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/></g><g fill="#787878" font-family="Arial,Helvetica" font-size="12px"><text x="6" y="15">Visual Paradigm Online Diagrams Express Edition</text></g><g fill="#787878" font-family="Arial,Helvetica" text-anchor="end" font-size="12px"><text x="1267" y="1004">Visual Paradigm Online Diagrams Express Edition</text></g></svg>