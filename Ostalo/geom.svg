<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1273px" height="1339px" viewBox="-0.5 -0.5 1273 1339" content="3cU2FsdwGVkX1M9fyhUvzA3EfPjg189V/DPk6FCtc8TWVgZyelsQ8=11ZmJ24c" style="background-color: rgb(255, 255, 255);"><defs><style type="text/css">ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;</style></defs><g><rect x="50.5" y="50" width="361" height="712" fill="#97d077" stroke="#000000" pointer-events="none"/><path d="M 50.5 68 L 411.5 68" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 50.5 121 L 411.5 121" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="230.5" y="62.5">geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="82.5"># _mat: Matrica</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="98.5"># _size: Velicina</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="114.5"># _tol: Element</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="132.5">+ geom()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="148.5">+ &lt;&lt;virtual&gt;&gt; ~geom()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="164.5">+ geom(const geom&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="180.5">+ geom(geom&amp;&amp;) noexcept</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="196.5">+ geom(const Matrica&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="212.5">+ geom(Matrica&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="228.5">+ geom(const Vektor&amp;, const Vektor&amp;, const Vektor&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="244.5">+ geom(Vektor&amp;&amp;, Vektor&amp;&amp;, Vektor&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="260.5">+ geom(const Vektor&amp;, const Vektor&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="276.5">+ geom(Vektor&amp;&amp;, Vektor&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="292.5">+ mat() const: const Matrica&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="308.5">+ size() const: Velicina</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="324.5">+ tol() const: Element</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="340.5">+ begin() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="356.5">+ cbegin() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="372.5">+ end() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="388.5">+ cend() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="404.5">+ inv(const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="420.5">+ pow(const int, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="436.5">+ pomeri(const double, const double, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="452.5">+ pomeri(tacka&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="468.5">+ pomeri(Vektor&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="484.5">+ pomeri(Vektor&amp;&amp;, const bool = false): geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="500.5">+ str() const: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="516.5">+ operator*(const geom&amp;) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="532.5">+ operator*(const double) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="548.5">+ operator*=(const geom&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="564.5">+ operator*=(const double): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="580.5">+ operator^(const int) const: geom</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="596.5">+ operator^=(const int): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="612.5">+ operator==(const geom&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="628.5">+ operator!=(const geom&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="644.5">+ operator=(const geom&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="660.5">+ operator=(geom&amp;&amp;) noexcept: geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="676.5">+ operator=(const Matrica&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="692.5">+ operator=(Matrica&amp;&amp;): geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="708.5">+ &lt;&lt;nodiscard&gt;&gt; operator[] (const Velicina) const: const Vektor&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="724.5">+ operator&lt;&lt;(const Element): Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="740.5">- proveri(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="57" y="756.5">- &lt;&lt;friend&gt;&gt; operator&gt;&gt;(std::istream&amp;, geom&amp;): std::istream&amp;</text></g><path d="M 503 102 L 769 102 L 769 117 L 784 117 L 784 210 L 503 210 Z" fill="#ff0082" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><path d="M 503 102 L 769 102 L 784 117 L 769 117 L 769 102 L 784 117 L 784 210 L 503 210 Z" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(505.5,109.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="263" height="72" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><span class="pl-k"> using</span> Matrica = std::vector&lt;std::vector&lt;<span class="pl-k">double</span>&gt;&gt;<br /><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> Vektor = Matrica::value_type</td>      </tr>      <tr>        </tr></tbody></table><table class="highlight tab-size js-file-line-container"><tbody><tr><td id="LC24" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> Element = Vektor::value_type</td></tr><tr></tr></tbody></table><span class="pl-k"> using</span> Velicina = Matrica::size_type<br /> using NizTacaka = std::vector&lt;tacka&gt;</div></div></foreignObject><svg width="263" height="72" style="width: 263px; height: 72px;"><defs><path id="kg6sl_aEMjHshwAZ" d="M0,12.6 h32.03125"/><path id="Ug6sl_aEMjHshwAa" d="M0,12.6 h263.171875 M0,27 h263.171875 M0,41.4 h263.171875 M0,55.8 h263.171875 M0,70.2 h263.171875"/><path id="Mg6sl_aEMjHshwAb" d="M213.109375,12.6 h36.046875"/><path id="sg6sl_aEMjHshwAc" d="M0,12.6 h263.171875 M0,27 h263.171875 M0,41.4 h263.171875 M0,55.8 h263.171875 M0,70.2 h263.171875"/><path id="cg6sl_aEMjHshwAd" d="M1,27.6 h28.6875"/><path id="8g6sl_aEMjHshwAe" d="M0,26.6 h186"/><path id="Cg6sl_aEMjHshwAf" d="M0,26.6 h186"/><path id="ig6sl_aEMjHshwAg" d="M0,26.6 h186"/><path id="ig6sl_aEMjHshwAh" d="M0 0"/><path id="Sg6sl_aEMjHshwAi" d="M1,43.6 h28.6875"/><path id="yg6sl_aEMjHshwAj" d="M0,42.6 h191"/><path id="Kg6sl_aEMjHshwAk" d="M0,58.6 h32.03125"/><path id="Kg6sl_aEMjHshwAl" d="M0,12.6 h263.171875 M0,27 h263.171875 M0,41.4 h263.171875 M0,55.8 h263.171875 M0,70.2 h263.171875"/><path id="ag6sl_aEMjHshwAm" d="M0,12.6 h263.171875 M0,27 h263.171875 M0,41.4 h263.171875 M0,55.8 h263.171875 M0,70.2 h263.171875"/></defs><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#kg6sl_aEMjHshwAZ"><tspan xml:space="preserve"> using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#Ug6sl_aEMjHshwAa"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Matrica = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Vektor = Matrica::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Element = Vektor::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Velicina = Matrica::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using NizTacaka = std::vector&lt;tacka&gt;</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#Mg6sl_aEMjHshwAb"><tspan xml:space="preserve">double</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#sg6sl_aEMjHshwAc"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Matrica = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Vektor = Matrica::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Element = Vektor::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Velicina = Matrica::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using NizTacaka = std::vector&lt;tacka&gt;</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#cg6sl_aEMjHshwAd"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#8g6sl_aEMjHshwAe"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Vektor = Matrica::value_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#Cg6sl_aEMjHshwAf"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Vektor = Matrica::value_type</tspan></tspan><tspan xml:space="preserve"/></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#ig6sl_aEMjHshwAg"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Vektor = Matrica::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#ig6sl_aEMjHshwAh"><tspan xml:space="preserve"/></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#Sg6sl_aEMjHshwAi"><tspan xml:space="preserve">using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#yg6sl_aEMjHshwAj"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Element = Vektor::value_type</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#Kg6sl_aEMjHshwAk"><tspan xml:space="preserve"> using</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#Kg6sl_aEMjHshwAl"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Matrica = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Vektor = Matrica::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Element = Vektor::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Velicina = Matrica::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using NizTacaka = std::vector&lt;tacka&gt;</tspan></textPath></text><text fill="rgb(0, 0, 0)" font-size="12px" font-family="Helvetica" font-weight="400"><textPath xlink:href="#ag6sl_aEMjHshwAm"><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Matrica = std::vector&lt;std::vector&lt;</tspan><tspan xml:space="preserve"><tspan xml:space="preserve">double</tspan></tspan><tspan xml:space="preserve">&gt;&gt;</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Vektor = Matrica::value_type</tspan></tspan><tspan xml:space="preserve"/></tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"><tspan xml:space="preserve"/></tspan></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve"><tspan xml:space="preserve">using</tspan></tspan><tspan xml:space="preserve"> Element = Vektor::value_type</tspan></tspan></tspan><tspan xml:space="preserve"/></tspan></tspan><tspan xml:space="preserve"><tspan xml:space="preserve"> using</tspan></tspan><tspan xml:space="preserve"> Velicina = Matrica::size_type</tspan><tspan xml:space="preserve"/><tspan xml:space="preserve"> using NizTacaka = std::vector&lt;tacka&gt;</tspan></textPath></text></svg></switch></g><rect x="531" y="274" width="223" height="124" fill="#999900" stroke="#000000" pointer-events="none"/><path d="M 531 292 L 754 292" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 531 345 L 754 345" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="533.5" y="286.5">Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="537.5" y="306.5">+ g: geom&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="537.5" y="322.5">+ t: tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="537.5" y="338.5">+ i: Velicina</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="537.5" y="356.5">+ Citac(geom&amp;, Velicina)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="537.5" y="372.5">+ Citac(tacka&amp;, Velicina)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="537.5" y="388.5">+ operator,(const Element) const: Citac</text></g><rect x="507" y="464.5" width="287" height="91" fill="#999900" stroke="#000000" pointer-events="none"/><path d="M 507 482.5 L 794 482.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 507 503.5 L 794 503.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="509.5" y="477">Exc</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="513.5" y="497"># poruka: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="513.5" y="515">+ explicit Exc(const char*)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="513.5" y="531">+ explicit Exc(const std::string&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="513.5" y="547">+ &lt;&lt;override&gt;&gt; what() const noexcept: const char*</text></g><rect x="853" y="50" width="367" height="812" fill="#cda2be" stroke="#000000" pointer-events="none"/><path d="M 853 68 L 1220 68" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 853 121 L 1220 121" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-size="12px"><text x="855.5" y="62.5">tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="82.5"># _mat: Vektor</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="98.5"># _size: Velicina</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="114.5"># _tol: Element</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="132.5">+ tacka()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="148.5">+ ~tacka()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="164.5">+ tacka(const tacka&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="180.5">+ tacka(tacka&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="196.5">+ tacka(const Element, const Element)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="212.5">+ tacka(const Element, const Element, const Element)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="228.5">+ tacka(const Matrica&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="244.5">+ tacka(Matrica&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="260.5">+ tacka(const Vektor&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="276.5">+ tacka(Vektor&amp;&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="292.5">+ mat() const: const Vektor&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="308.5">+ size() const: Velicina</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="324.5">+ tol() const: Element</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="340.5">+ begin() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="356.5">+ cbegin() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="372.5">+ end() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="388.5">+ cend() const noexcept: auto</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="404.5">+ str() const: std::string</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="420.5">+ primeni(const geom&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="436.5">+ operator+() const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="452.5">+ operator+(const tacka&amp;) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="468.5">+ operator+(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="484.5">+ operator+=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="500.5">+ operator+=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="516.5">+ operator-() const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="532.5">+ operator-(const tacka&amp;) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="548.5">+ operator-(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="564.5">+ operator-=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="580.5">+ operator-=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="596.5">+ operator*(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="612.5">+ operator*=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="628.5">+ operator/(const double) const: tacka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="644.5">+ operator/=(const double): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="660.5">+ operator==(const tacka&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="676.5">+ operator&lt;(const tacka&amp;) const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="692.5">+ operator=(const tacka&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="708.5">+ operator=(tacka&amp;&amp;) noexcept: tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="724.5">+ operator=(const Matrica&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="740.5">+ operator=(Matrica&amp;&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="756.5">+ operator=(const Vektor&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="772.5">+ operator=(Vektor&amp;&amp;): tacka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="788.5">+ &lt;&lt;nodiscard&gt;&gt; operator[] (const Velicina) const: const Element&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="804.5">+ operator&lt;&lt;(const Element): Citac</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="820.5">- proveri(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="836.5">- proverim(const Matrica&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="859.5" y="852.5">- &lt;&lt;friend&gt;&gt; operator&gt;&gt;(std::istream&amp;, tacka&amp;): std::istream&amp;</text></g><path d="M 411.5 406 L 461 406 Q 471 406 471 396 L 471 346 Q 471 336 481 336 L 528.76 336" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 517.88 342 L 529.88 336 L 517.88 330" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="470.5" y="373.5">&lt;&lt;use&gt;&gt;</text></g><path d="M 412 228 L 447 228 Q 457 228 457 218 L 457 166 Q 457 156 467 156 L 503 156" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 412 584 L 449 584 Q 459 584 459 574 L 459 520 Q 459 510 469 510 L 504.76 510" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 493.88 516 L 505.88 510 L 493.88 504" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="458.5" y="549">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 253 L 829 253 Q 819 253 819 243 L 819 166 Q 819 156 809 156 L 784 156" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 853 456 L 814 456 Q 804 456 804 446 L 804 346 Q 804 336 794 336 L 756.24 336" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 767.12 330 L 755.12 336 L 767.12 342" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="803.5" y="398">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 659 L 834 659 Q 824 659 824 649 L 824 520 Q 824 510 814 510 L 796.24 510" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 807.12 504 L 795.12 510 L 807.12 516" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="823.5" y="587">&lt;&lt;use&gt;&gt;</text></g><rect x="519.5" y="611.5" width="246" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 519.5 629.5 L 765.5 629.5" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="642" y="624">trans</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="526" y="646">+ trans(double, double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="526" y="662">+ trans(const tacka&amp;, const bool = false)</text></g><rect x="69" y="854.5" width="395" height="89" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 69 872.5 L 464 872.5" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="266" y="867">skal</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="75.5" y="889">+ skal(double, double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="75.5" y="905">+ skal(double, double, const tacka&amp; = {0, 0}, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="75.5" y="921">+ skal(const tacka&amp;, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="75.5" y="937">+ skal(const tacka&amp;, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="541" y="868.5" width="399" height="89" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 541 886.5 L 940 886.5" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="740" y="881">smic</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="547.5" y="903">+ smic(double, double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="547.5" y="919">+ smic(double, double, const tacka&amp; = {0, 0}, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="547.5" y="935">+ smic(const tacka&amp;, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="547.5" y="951">+ smic(const tacka&amp;, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="465.5" y="698" width="342" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 465.5 716 L 807.5 716" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="636" y="710.5">rot</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="472" y="732.5">+ rot(double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="472" y="748.5">+ rot(double, const tacka&amp; = {0, 0}, const bool = false)</text></g><rect x="464" y="770" width="345" height="57" fill="#7acff5" stroke="#9c004f" pointer-events="none"/><path d="M 464 788 L 809 788" fill="none" stroke="#9c004f" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="636" y="782.5">refl</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="470.5" y="804.5">+ refl(double, const double, const double, const bool = false)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="470.5" y="820.5">+ refl(double, const tacka&amp; = {0, 0}, const bool = false)</text></g><path d="M 425.12 584 L 456 584 Q 466 584 466 594 L 466 630 Q 466 640 476 640 L 520 640" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 413.12 584 L 425.12 578 L 425.12 590 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 425.12 584 L 432.06 584 Q 439 584 439 594 L 439 717 Q 439 727 449 727 L 465.5 727" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 413.12 584 L 425.12 578 L 425.12 590 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 321 775.12 L 321 789 Q 321 799 331 799 L 464 799" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 321 763.12 L 327 775.12 L 315 775.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 141 775.12 L 141 798 Q 141 808 151 808 L 257 808 Q 267 808 267 818 L 267 854.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 141 763.12 L 147 775.12 L 135 775.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 231 775.12 L 231 784.56 Q 231 794 241 794 L 274 794 Q 284 794 284 804 L 284 831 Q 284 841 294 841 L 506 841 Q 516 841 516 851 L 516 881 Q 516 891 526 891 L 541 891" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 231 763.12 L 237 775.12 L 225 775.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="125" y="988" width="196" height="124" fill="#67ab9f" stroke="#000000" pointer-events="none"/><path d="M 125 1006 L 321 1006" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 125 1027 L 321 1027" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="222.5" y="1000.5">oblik</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="131.5" y="1020.5"># _tacke: NizTacaka</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="131.5" y="1038.5">+ &lt;&lt;virtual&gt;&gt; ~oblik()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="131.5" y="1054.5">+ tacke() const: const NizTacaka&amp;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="131.5" y="1070.5">+ transformisi(const geom&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="131.5" y="1086.5"># oblik(const NizTacaka&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="131.5" y="1102.5"># oblik(NizTacaka&amp;&amp; = {})</text></g><rect x="449" y="987" width="221" height="188" fill="#e6ffcc" stroke="#000000" pointer-events="none"/><path d="M 449 1005 L 670 1005" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 449 1026 L 670 1026" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="559" y="999.5">poly</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1019.5">- _zatvoren: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1037.5">+ poly(const NizTacaka&amp;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1053.5">+ poly(NizTacaka&amp;&amp; = {})</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1069.5">+ poly(const std::initializer_list&lt;tacka&gt;)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1085.5">+ zatvoren() const: bool</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1101.5">+ zatvori(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1117.5">+ otvori(): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1133.5">+ dodaj(const tacka&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1149.5">+ dodaj(tacka&amp;&amp;): void</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="455.5" y="1165.5">+ omot(): void</text></g><path d="M 334.12 1050 L 375 1050 Q 385 1050 385 1060 L 385 1071 Q 385 1081 395 1081 L 449 1081" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 322.12 1050 L 334.12 1044 L 334.12 1056 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="749" y="1015" width="372" height="44" fill="#e6ffcc" stroke="#000000" pointer-events="none"/><path d="M 749 1033 L 1121 1033" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="934.5" y="1027.5">ppoly</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="755.5" y="1049.5">+ ppoly(const tacka&amp; = {0, 0}, const Velicina = 3, const Element = 3)</text></g><path d="M 683.12 1081 L 700 1081 Q 710 1081 710 1071 L 710 1047 Q 710 1037 720 1037 L 749 1037" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 671.12 1081 L 683.12 1075 L 683.12 1087 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="231" y="1228" width="375" height="58" fill="#ff6666" stroke="#000000" pointer-events="none"/><path d="M 231 1246 L 606 1246" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="418" y="1240.5">elipsa</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="237.5" y="1262.5">+ elipsa(const tacka&amp; = {0, 0}, const Element = 3, const Element = 6)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="237.5" y="1278.5">+ elipsa(const tacka&amp;, const tacka&amp;, const tacka&amp;)</text></g><rect x="749" y="1180" width="267" height="60" fill="#ffcc99" stroke="#000000" pointer-events="none"/><path d="M 749 1198 L 1016 1198" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="882" y="1192.5">krug</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="755.5" y="1214.5">+ krug(const tacka&amp; = {0, 0}, const Element = 5)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="755.5" y="1230.5">+ krug(const tacka&amp;, const tacka&amp;)</text></g><path d="M 258.88 1112 L 264.94 1112 Q 271 1112 271 1122 L 271 1135 Q 271 1145 281 1145 L 385 1145 Q 395 1145 395 1155 L 395 1195 Q 395 1205 405 1205 L 718 1205 Q 728 1205 728 1212.5 L 728 1216.25 Q 728 1220 738 1220 L 743.5 1220 Q 749 1220 749 1215 L 749 1210" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 270.88 1112 L 258.88 1118 L 258.88 1106 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 174 1125.12 L 174 1247 Q 174 1257 184 1257 L 231 1257" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 174 1113.12 L 180 1125.12 L 168 1125.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 411.5 406 L 461 406 Q 471 406 471 396 L 471 346 Q 471 336 481 336 L 528.76 336" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 517.88 342 L 529.88 336 L 517.88 330" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="470.5" y="373.5">&lt;&lt;use&gt;&gt;</text></g><path d="M 412 228 L 447 228 Q 457 228 457 218 L 457 166 Q 457 156 467 156 L 503 156" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 412 584 L 449 584 Q 459 584 459 574 L 459 520 Q 459 510 469 510 L 504.76 510" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 493.88 516 L 505.88 510 L 493.88 504" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="458.5" y="549">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 253 L 829 253 Q 819 253 819 243 L 819 166 Q 819 156 809 156 L 784 156" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 853 456 L 814 456 Q 804 456 804 446 L 804 346 Q 804 336 794 336 L 756.24 336" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 767.12 330 L 755.12 336 L 767.12 342" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="803.5" y="398">&lt;&lt;use&gt;&gt;</text></g><path d="M 853 659 L 834 659 Q 824 659 824 649 L 824 520 Q 824 510 814 510 L 796.24 510" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 807.12 504 L 795.12 510 L 807.12 516" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><text x="823.5" y="587">&lt;&lt;use&gt;&gt;</text></g><path d="M 425.12 584 L 456 584 Q 466 584 466 594 L 466 630 Q 466 640 476 640 L 520 640" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 413.12 584 L 425.12 578 L 425.12 590 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 425.12 584 L 432.06 584 Q 439 584 439 594 L 439 717 Q 439 727 449 727 L 465.5 727" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 413.12 584 L 425.12 578 L 425.12 590 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 321 775.12 L 321 789 Q 321 799 331 799 L 464 799" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 321 763.12 L 327 775.12 L 315 775.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 141 775.12 L 141 798 Q 141 808 151 808 L 257 808 Q 267 808 267 818 L 267 854.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 141 763.12 L 147 775.12 L 135 775.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 231 775.12 L 231 784.56 Q 231 794 241 794 L 274 794 Q 284 794 284 804 L 284 831 Q 284 841 294 841 L 506 841 Q 516 841 516 851 L 516 881 Q 516 891 526 891 L 541 891" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 231 763.12 L 237 775.12 L 225 775.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 334.12 1050 L 375 1050 Q 385 1050 385 1060 L 385 1071 Q 385 1081 395 1081 L 449 1081" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 322.12 1050 L 334.12 1044 L 334.12 1056 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 683.12 1081 L 700 1081 Q 710 1081 710 1071 L 710 1047 Q 710 1037 720 1037 L 749 1037" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 671.12 1081 L 683.12 1075 L 683.12 1087 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 258.88 1112 L 264.94 1112 Q 271 1112 271 1122 L 271 1135 Q 271 1145 281 1145 L 385 1145 Q 395 1145 395 1155 L 395 1195 Q 395 1205 405 1205 L 718 1205 Q 728 1205 728 1212.5 L 728 1216.25 Q 728 1220 738 1220 L 743.5 1220 Q 749 1220 749 1215 L 749 1210" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 270.88 1112 L 258.88 1118 L 258.88 1106 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 174 1125.12 L 174 1247 Q 174 1257 184 1257 L 231 1257" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 174 1113.12 L 180 1125.12 L 168 1125.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/></g><g fill="#787878" font-family="Arial,Helvetica" font-size="12px"><text x="6" y="15">Visual Paradigm Online Diagrams Express Edition</text></g><g fill="#787878" font-family="Arial,Helvetica" text-anchor="end" font-size="12px"><text x="1267" y="1332">Visual Paradigm Online Diagrams Express Edition</text></g></svg>